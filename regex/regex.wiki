[[tags: egg]]
[[toc:]]

== regex

=== Introduction

This extension provides the regular expression API that used to be
available in CHICKEN releases before version ''4.6.1''. It is a thin
wrapper around the [[/man/4/Unit irregex|irregex]} procedures and
only intended to keep old code working.

=== Usage

<enscript highlight=scheme>
(require-extension regex)
</enscript>

=== Documentation

==== grep

<procedure>(grep REGEX LIST [ACCESSOR])</procedure>

Returns all items of {{LIST}} that match the regular expression
{{REGEX}}.  This procedure could be defined as follows:

<enscript highlight=scheme>
(define (grep regex lst)
  (filter (lambda (x) (string-search regex x)) lst) )
</enscript>

{{ACCESSOR}} is an optional accessor-procedure applied to each
element before doing the match. It should take a single argument
and return a string that will then be used in the regular expression
matching. {{ACCESSOR}} defaults to the identity function.


==== glob->regexp

<procedure>(glob->regexp PATTERN [SRE?])</procedure>

Converts the file-pattern {{PATTERN}} into a regular expression.

<enscript highlight=scheme>
(glob->regexp "foo.*")
=> "foo\..*"
</enscript>

{{PATTERN}} should follow "glob" syntax. Allowed wildcards are

 *
 [C...]
 [C1-C2]
 [-C...]
 ?

{{glob->regexp}} returns a regular expression object if the optional
argument {{SRE?}} is false or not given, otherwise the SRE of the
computed regular expression is returned.


==== regexp

<procedure>(regexp STRING [IGNORECASE [IGNORESPACE [UTF8]]])</procedure>

Returns a precompiled regular expression object for {{string}}.
The optional arguments {{IGNORECASE}}, {{IGNORESPACE}} and {{UTF8}}
specify whether the regular expression should be matched with case- or whitespace-differences
ignored, or whether the string should be treated as containing UTF-8 encoded
characters, respectively.

Note that code that uses regular expressions heavily should always
use them in precompiled form, which is likely to be much faster than
passing strings to any of the regular-expression routines described
below.


==== regexp?

<procedure>(regexp? X)</procedure>

Returns {{#t}} if {{X}} is a precompiled regular expression,
or {{#f}} otherwise.


==== string-match
==== string-match-positions

<procedure>(string-match REGEXP STRING)</procedure><br>
<procedure>(string-match-positions REGEXP STRING)</procedure>

Matches the regular expression in {{REGEXP}} (a string or a precompiled
regular expression) with
{{STRING}} and returns either {{#f}} if the match failed,
or a list of matching groups, where the first element is the complete
match.  For each matching group the
result-list contains either: {{#f}} for a non-matching but optional
group; a list of start- and end-position of the match in {{STRING}}
(in the case of {{string-match-positions}}); or the matching
substring (in the case of {{string-match}}). Note that the exact string
is matched. For searching a pattern inside a string, see below.
Note also that {{string-match}} is implemented by calling
{{string-search}} with the regular expression wrapped in {{^ ... $}}.
If invoked with a precompiled regular expression argument (by using
{{regexp}}), {{string-match}} is identical to {{string-search}}.


==== string-search
==== string-search-positions

<procedure>(string-search REGEXP STRING [START [RANGE]])</procedure><br>
<procedure>(string-search-positions REGEXP STRING [START [RANGE]])</procedure>

Searches for the first match of the regular expression in
{{REGEXP}} with {{STRING}}. The search can be limited to
{{RANGE}} characters.


==== string-split-fields

<procedure>(string-split-fields REGEXP STRING [MODE [START]])</procedure>

Splits {{STRING}} into a list of fields according to {{MODE}},
where {{MODE}} can be the keyword {{#:infix}} ({{REGEXP}}
matches field separator), the keyword {{#:suffix}} ({{REGEXP}}
matches field terminator) or {{#t}} ({{REGEXP}} matches field),
which is the default.

<enscript highlight=scheme>
(define s "this is a string 1, 2, 3,")

(string-split-fields "[^ ]+" s)

  => ("this" "is" "a" "string" "1," "2," "3,")

(string-split-fields " " s #:infix)

  => ("this" "is" "a" "string" "1," "2," "3,")

(string-split-fields "," s #:suffix)
 
  => ("this is a string 1" " 2" " 3")
</enscript>


==== string-substitute

<procedure>(string-substitute REGEXP SUBST STRING [MODE])</procedure>

Searches substrings in {{STRING}} that match {{REGEXP}}
and substitutes them with the string {{SUBST}}. The substitution
can contain references to subexpressions in 
{{REGEXP}} with the {{\NUM}} notation, where {{NUM}}
refers to the NUMth parenthesized expression. The optional argument
{{MODE}} defaults to 1 and specifies the number of the match to
be substituted. Any non-numeric index specifies that all matches are to
be substituted.

<enscript highlight=scheme>
(string-substitute "([0-9]+) (eggs|chicks)" "\\2 (\\1)" "99 eggs or 99 chicks" 2)
=> "99 eggs or chicks (99)"
</enscript>

Note that a regular expression that matches an empty string will
signal an error.


==== string-substitute*

<procedure>(string-substitute* STRING SMAP [MODE])</procedure>

Substitutes elements of {{STRING}} with {{string-substitute}} according to {{SMAP}}.
{{SMAP}} should be an association-list where each element of the list
is a pair of the form {{(MATCH . REPLACEMENT)}}. Every occurrence of
the regular expression {{MATCH}} in {{STRING}} will be replaced by the string
{{REPLACEMENT}}

<enscript highlight=scheme>
(string-substitute* "<h1>Hello, world!</h1>" '(("<[/A-Za-z0-9]+>" . "")))

=>  "Hello, world!"
</enscript>


==== regexp-escape

<procedure>(regexp-escape STRING)</procedure>

Escapes all special characters in {{STRING}} with {{\}}, so that the string can be embedded
into a regular expression.

<enscript highlight=scheme>
(regexp-escape "^[0-9]+:.*$")
=>  "\\^\\[0-9\\]\\+:.\n.\\*\\$"
</enscript>


=== Author

[[felix winkelmann]]

=== License

Copyright (c) 2010, Felix L. Winkelmann
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of the authors may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=== Version History

; 0.1 : initial release
