;; posix

(_exit (procedure _exit (#!optional fixnum) noreturn))
(call-with-input-pipe (#(procedure #:enforce) call-with-input-pipe (string (procedure (input-port) . *) #!optional symbol) . *))
(call-with-output-pipe (#(procedure #:enforce) call-with-output-pipe (string (procedure (input-port) . *) #!optional symbol) . *))
(change-directory (#(procedure #:clean #:enforce) change-directory (string) string))
(change-directory* (#(procedure #:clean #:enforce) change-directory* (fixnum) fixnum))
(change-file-mode (#(procedure #:clean #:enforce) change-file-mode (string fixnum) undefined))
(change-file-owner (#(procedure #:clean #:enforce) change-file-owner (string fixnum fixnum) undefined))
(close-input-pipe (#(procedure #:clean #:enforce) close-input-pipe (input-port) fixnum))
(close-output-pipe (#(procedure #:clean #:enforce) close-output-pipe (output-port) fixnum))
(create-directory (#(procedure #:clean #:enforce) create-directory (string #!optional *) string))
(create-fifo (#(procedure #:clean #:enforce) create-fifo (string #!optional fixnum) undefined))
(create-pipe (procedure create-pipe () fixnum fixnum))
(create-session (#(procedure #:clean) create-session () fixnum))
(create-symbolic-link (#(procedure #:clean #:enforce) create-symbolic-link (string string) undefined))

;; extra arg for "parameterize" - ugh, what a hack...
(current-directory (#(procedure #:clean #:enforce) current-directory (#!optional string *) string))

(current-effective-group-id (#(procedure #:clean) current-effective-group-id () fixnum))
(current-effective-user-id (#(procedure #:clean) current-effective-user-id () fixnum))
(current-effective-user-name (#(procedure #:clean) current-effective-user-name () string))
(get-environment-variables (#(procedure #:clean) get-environment-variables () (list-of string)))
(current-group-id (#(procedure #:clean) current-group-id () fixnum))
(current-process-id (#(procedure #:clean) current-process-id () fixnum))
(current-user-id (#(procedure #:clean) current-user-id () fixnum))
(current-user-name (#(procedure #:clean) current-user-name () string))
(delete-directory (#(procedure #:clean #:enforce) delete-directory (string #!optional *) string))
(directory (#(procedure #:clean #:enforce) directory (#!optional string *) (list-of string)))
(directory? (#(procedure #:clean #:enforce) directory? ((or string fixnum)) boolean))
(duplicate-fileno (#(procedure #:clean #:enforce) duplicate-fileno (fixnum #!optional fixnum) fixnum))
(errno/2big fixnum)
(errno/acces fixnum)
(errno/again fixnum)
(errno/badf fixnum)
(errno/busy fixnum)
(errno/child fixnum)
(errno/deadlk fixnum)
(errno/dom fixnum)
(errno/exist fixnum)
(errno/fault fixnum)
(errno/fbig fixnum)
(errno/ilseq fixnum)
(errno/intr fixnum)
(errno/inval fixnum)
(errno/io fixnum)
(errno/isdir fixnum)
(errno/mfile fixnum)
(errno/mlink fixnum)
(errno/nametoolong fixnum)
(errno/nfile fixnum)
(errno/nodev fixnum)
(errno/noent fixnum)
(errno/noexec fixnum)
(errno/nolck fixnum)
(errno/nomem fixnum)
(errno/nospc fixnum)
(errno/nosys fixnum)
(errno/notdir fixnum)
(errno/notempty fixnum)
(errno/notty fixnum)
(errno/nxio fixnum)
(errno/perm fixnum)
(errno/pipe fixnum)
(errno/range fixnum)
(errno/rofs fixnum)
(errno/spipe fixnum)
(errno/srch fixnum)
(errno/wouldblock fixnum)
(errno/xdev fixnum)
(fcntl/dupfd fixnum)
(fcntl/getfd fixnum)
(fcntl/getfl fixnum)
(fcntl/setfd fixnum)
(fcntl/setfl fixnum)
(file-access-time (#(procedure #:clean #:enforce) file-access-time ((or string fixnum)) number))
(file-change-time (#(procedure #:clean #:enforce) file-change-time ((or string fixnum)) number))
(file-close (#(procedure #:clean #:enforce) file-close (fixnum) undefined))
(file-control (#(procedure #:clean #:enforce) file-control (fixnum fixnum #!optional fixnum) fixnum))
(file-creation-mode (#(procedure #:clean #:enforce) file-creation-mode (#!optional fixnum) fixnum))
(file-execute-access? (#(procedure #:clean #:enforce) file-execute-access? (string) boolean))
(file-link (#(procedure #:clean #:enforce) file-link (string string) undefined))
(file-lock (#(procedure #:clean #:enforce) file-lock (port #!optional fixnum *) (struct lock)))
(file-lock/blocking (#(procedure #:clean #:enforce) file-lock/blocking (port #!optional fixnum *) (struct lock)))
(file-mkstemp (#(procedure #:clean #:enforce) file-mkstemp (string) fixnum string))
(file-modification-time (#(procedure #:clean #:enforce) file-modification-time ((or string fixnum)) number))
(file-open (#(procedure #:clean #:enforce) file-open (string fixnum #!optional fixnum) fixnum))
(file-owner (#(procedure #:clean #:enforce) file-owner ((or string fixnum)) fixnum))
(file-permissions (#(procedure #:clean #:enforce) file-permissions ((or string fixnum)) fixnum))
(file-position (#(procedure #:clean #:enforce) file-position ((or port fixnum)) fixnum))
(file-read (#(procedure #:clean #:enforce) file-read (fixnum fixnum #!optional *) list))
(file-read-access? (#(procedure #:clean #:enforce) file-read-access? (string) boolean))
(file-select (#(procedure #:clean #:enforce) file-select ((or (list-of fixnum) fixnum false) (or (list-of fixnum) fixnum false) #!optional fixnum) * *))
(file-size (#(procedure #:clean #:enforce) file-size ((or string fixnum)) number))
(file-stat (#(procedure #:clean #:enforce) file-stat ((or string fixnum) #!optional *) (vector-of number)))
(file-test-lock (#(procedure #:clean #:enforce) file-test-lock (port #!optional fixnum *) boolean))
(file-truncate (#(procedure #:clean #:enforce) file-truncate ((or string fixnum) fixnum) undefined))
(file-type (#(procedure #:clean #:enforce) ((or string fixnum) #!optional * *) symbol))
(file-unlock (#(procedure #:clean #:enforce) file-unlock ((struct lock)) undefined))
(file-write (#(procedure #:clean #:enforce) file-write (fixnum * #!optional fixnum) fixnum))
(file-write-access? (#(procedure #:clean #:enforce) file-write-access? (string) boolean))
(fileno/stderr fixnum)
(fileno/stdin fixnum)
(fileno/stdout fixnum)
(find-files (#(procedure #:enforce) find-files (string #!rest) list))
(get-groups (#(procedure #:clean) get-groups () list))
(get-host-name (#(procedure #:clean) get-host-name () string))
(glob (#(procedure #:clean #:enforce) glob (#!rest string) list))
(group-information (#(procedure #:clean #:enforce) group-information (fixnum #!optional *) *))
(initialize-groups (#(procedure #:clean #:enforce) initialize-groups (string fixnum) undefined))
(local-time->seconds (#(procedure #:clean #:enforce) local-time->seconds ((vector fixnum fixnum fixnum fixnum fixnum fixnum fixnum fixnum boolean fixnum)) number))
(local-timezone-abbreviation (#(procedure #:clean) local-timezone-abbreviation () string))
(open-input-file* (#(procedure #:clean #:enforce) open-input-file* (fixnum #!optional symbol) input-port))
(open-input-pipe (#(procedure #:clean #:enforce) open-input-pipe (string #!optional symbol) input-port))
(open-output-file* (#(procedure #:clean #:enforce) open-output-file* (fixnum #!optional symbol) output-port))
(open-output-pipe (#(procedure #:clean #:enforce) open-output-pipe (string #!optional symbol) output-port))
(open/append fixnum)
(open/binary fixnum)
(open/creat fixnum)
(open/excl fixnum)
(open/fsync fixnum)
(open/noctty fixnum)
(open/nonblock fixnum)
(open/rdonly fixnum)
(open/rdwr fixnum)
(open/read fixnum)
(open/sync fixnum)
(open/text fixnum)
(open/trunc fixnum)
(open/write fixnum)
(open/wronly fixnum)
(parent-process-id (#(procedure #:clean) parent-process-id () fixnum))
(perm/irgrp fixnum)
(perm/iroth fixnum)
(perm/irusr fixnum)
(perm/irwxg fixnum)
(perm/irwxo fixnum)
(perm/irwxu fixnum)
(perm/isgid fixnum)
(perm/isuid fixnum)
(perm/isvtx fixnum)
(perm/iwgrp fixnum)
(perm/iwoth fixnum)
(perm/iwusr fixnum)
(perm/ixgrp fixnum)
(perm/ixoth fixnum)
(perm/ixusr fixnum)
(pipe/buf fixnum)
(port->fileno (#(procedure #:clean #:enforce) port->fileno (port) fixnum))
(process (#(procedure #:clean #:enforce) process (string #!optional (list-of string) (list-of string)) input-port output-port fixnum))
(process* (#(procedure #:clean #:enforce) process* (string #!optional (list-of string) (list-of string)) input-port output-port fixnum *))

(process-execute
 (#(procedure #:clean #:enforce) process-execute (string #!optional (list-of string) (list-of string)) noreturn))

(process-fork (#(procedure #:enforce) process-fork (#!optional (or (procedure () . *) false) *) fixnum))

(process-group-id (#(procedure #:clean #:enforce) process-group-id () fixnum))
(process-run (#(procedure #:clean #:enforce) process-run (string #!optional (list-of string)) fixnum))
(process-signal (#(procedure #:clean #:enforce) process-signal (fixnum #!optional fixnum) undefined))
(process-wait (#(procedure #:clean #:enforce) process-wait (#!optional fixnum *) fixnum fixnum fixnum))
(read-symbolic-link (#(procedure #:clean #:enforce) read-symbolic-link (string #!optional boolean) string))
(regular-file? (#(procedure #:clean #:enforce) regular-file? ((or string fixnum)) boolean))
(seconds->local-time (#(procedure #:clean #:enforce) seconds->local-time (#!optional number) (vector fixnum fixnum fixnum fixnum fixnum fixnum fixnum fixnum boolean fixnum)))
(seconds->string (#(procedure #:clean #:enforce) seconds->string (#!optional number) string))
(seconds->utc-time (#(procedure #:clean #:enforce) seconds->utc-time (#!optional number) (vector fixnum fixnum fixnum fixnum fixnum fixnum fixnum fixnum boolean fixnum)))
(seek/cur fixnum)
(seek/end fixnum)
(seek/set fixnum)
(set-alarm! (#(procedure #:clean #:enforce) set-alarm! (number) number))
(set-buffering-mode! (#(procedure #:clean #:enforce) set-buffering-mode! (port symbol #!optional fixnum) undefined))
(set-file-position! (#(procedure #:clean #:enforce) set-file-position! ((or port fixnum) fixnum #!optional fixnum) undefined))
(set-groups! (#(procedure #:clean #:enforce) set-groups! ((list-of fixnum)) undefined))
(set-root-directory! (#(procedure #:clean #:enforce) set-root-directory! (string) undefined))
(set-signal-handler! (#(procedure #:clean #:enforce) set-signal-handler! (fixnum (or false (procedure (fixnum) . *))) undefined))
(set-signal-mask! (#(procedure #:clean #:enforce) set-signal-mask! ((list-of fixnum)) undefined))
(setenv (#(procedure #:clean #:enforce) setenv (string string) undefined))
(signal-handler (#(procedure #:clean #:enforce) signal-handler (fixnum) (or false (procedure (fixnum) . *))))
(signal-mask (#(procedure #:clean) signal-mask () fixnum))
(signal-mask! (#(procedure #:clean #:enforce) signal-mask! (fixnum) undefined))
(signal-masked? (#(procedure #:clean #:enforce) signal-masked? (fixnum) boolean))
(signal-unmask! (#(procedure #:clean #:enforce) signal-unmask! (fixnum) undefined))
(signal/abrt fixnum)
(signal/alrm fixnum)
(signal/chld fixnum)
(signal/cont fixnum)
(signal/fpe fixnum)
(signal/hup fixnum)
(signal/ill fixnum)
(signal/int fixnum)
(signal/io fixnum)
(signal/bus fixnum)
(signal/kill fixnum)
(signal/pipe fixnum)
(signal/prof fixnum)
(signal/quit fixnum)
(signal/segv fixnum)
(signal/stop fixnum)
(signal/term fixnum)
(signal/trap fixnum)
(signal/tstp fixnum)
(signal/urg fixnum)
(signal/usr1 fixnum)
(signal/usr2 fixnum)
(signal/vtalrm fixnum)
(signal/winch fixnum)
(signal/xcpu fixnum)
(signal/xfsz fixnum)
(signals-list list)
(sleep (#(procedure #:clean #:enforce) sleep (fixnum) fixnum))
(block-device? (#(procedure #:clean #:enforce) block-device? ((or string fixnum)) boolean))
(character-device? (#(procedure #:clean #:enforce) character-device? ((or string fixnum)) boolean))
(fifo? (#(procedure #:clean #:enforce) fifo? ((or string fixnum)) boolean))
(socket? (#(procedure #:clean #:enforce) socket? ((or string fixnum)) boolean))
(string->time (#(procedure #:clean #:enforce) string->time (string #!optional string) (vector fixnum fixnum fixnum fixnum fixnum fixnum fixnum fixnum boolean fixnum)))
(symbolic-link? (#(procedure #:clean #:enforce) symbolic-link? ((or string fixnum)) boolean))
(system-information (#(procedure #:clean) system-information () list))
(terminal-name (#(procedure #:clean #:enforce) terminal-name (port) string))
(terminal-port? (#(procedure #:clean #:enforce) terminal-port? (port) boolean))
(terminal-size (#(procedure #:clean #:enforce) terminal-size (port) fixnum fixnum))
(time->string (#(procedure #:clean #:enforce) time->string ((vector fixnum fixnum fixnum fixnum fixnum fixnum fixnum fixnum boolean fixnum) #!optional string) string))
(unmap-file-from-memory (#(procedure #:clean #:enforce) unmap-file-from-memory ((struct mmap) #!optional fixnum) undefined))
(unsetenv (#(procedure #:clean #:enforce) unsetenv (string) undefined))
(user-information (#(procedure #:clean #:enforce) user-information ((or string fixnum) #!optional *) *))
(utc-time->seconds (#(procedure #:clean #:enforce) utc-time->seconds ((vector fixnum fixnum fixnum fixnum fixnum fixnum fixnum fixnum boolean fixnum)) number))
(with-input-from-pipe (#(procedure #:enforce) with-input-from-pipe (string (procedure () . *) #!optional symbol) . *))
(with-output-to-pipe (#(procedure #:enforce) with-output-to-pipe (string (procedure () . *) #!optional symbol) . *))
