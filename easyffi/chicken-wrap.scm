;;;; chicken-wrap.scm - Standalone wrapper generator

(define-constant +version+ 1.7)

(require-extension srfi-1 utils easyffi-base)

(define (usage #!optional (status 0))
  (print #<<EOF
usage: chicken-wrap [OPTION | FILENAME ...]

  -help              show this message
  -to-stdout         write generated code to stdout
  -debug             generate additional debug output

Reads C/C++ files and generates Scheme wrapper code.
Specifying "-" as filename reads from stdin.
EOF
) (exit status) )

(define *to-stdout* #f)

(define (main args)
  (let ((files
	 (filter-map
	  (lambda (arg)
	    (cond ((string=? "-to-stdout" arg)
		   (set! *to-stdout* #t)
		   #f)
		  ((string=? "-debug" arg)
		   (set! chicken.compiler.support#debugging-chicken '(C))
		   #f)
		  ((member arg '("--help" "-help" "-h"))
		   (usage 0) )
		  ((and (> (string-length arg) 1)
			(char=? #\- (string-ref arg 0)) )
		   (usage 1) )
		  (else arg) ) )
	  args) ) )
    (when (null? files) (usage 1))
    (for-each
     (lambda (f)
       (define (process)
	 (print "\n;;; generated by chicken-wrap from " f #\newline)
	 (pp `(begin
		,@(parse-easy-ffi
		   (read-all
		    (if (string=? f "-") 
			(current-input-port)
			f) ) ) ) ) )
       (if *to-stdout*
	   (process)
	   (with-output-to-file (pathname-replace-extension f "scm")
	     process) ) )
     files) ) )

(main (command-line-arguments))
